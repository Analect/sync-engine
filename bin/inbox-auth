#!/usr/bin/env python
from gevent import monkey; monkey.patch_all()
import sys
import click

from setproctitle import setproctitle; setproctitle('inbox-auth')
from sqlalchemy.orm.exc import NoResultFound

from inbox.config import config
from inbox.util.startup import preflight
from inbox.sharding import namespace_managing_session
from inbox.models import Account
from inbox.auth import handler_from_email
from inbox.basicauth import NotSupportedError


@click.command()
@click.argument('email_address')
@click.option('--token', default=None, help='Authorization token.')
@click.option('--exit_after_link', is_flag=True,
              help='Exit after showing the link. Conceivably useful for '
                   'automating account creation.')
@click.option('--reauth', is_flag=True,
              help='Re-authenticate an account even if it already exists')
def main(email_address, token, exit_after_link, reauth):
    """ Auth an email account. """
    preflight()

    shard_key = config.get_required('DEFAULT_SHARD_KEY')
    with namespace_managing_session(shard_key) as db_session:
        auth_handler = handler_from_email(email_address)
        create_account = auth_handler.create_auth_account

        try:
            account = db_session.query(Account).filter_by(
                email_address=email_address).one()

            if reauth:
                account = create_account(db_session, email_address,
                                         token, exit_after_link)
            else:
                sys.exit('Already have this account!')
        except NoResultFound:
            account = create_account(db_session, email_address,
                                     token, exit_after_link)

        try:
            if auth_handler.verify_account(account):
                db_session.add(account)
                db_session.commit()
        except NotSupportedError as e:
            sys.exit(str(e))

    print 'OK. Authenticated account for {}'.format(email_address)

if __name__ == '__main__':
    main()
